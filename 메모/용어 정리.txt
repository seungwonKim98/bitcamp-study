		C/S Application ( client / server )
		// 서버와 클라이언트 둘다 필요
------┬------------------------┿----------------------┬-----------
    web server 	          ftp server		game sever

------┿------------------------┿----------------------┿-----------
    web client 		ftp client 	game client
        ∥
    web browser

		Standalone App.(Application) 
	// 서버없이 로컬 pc 에서 돌아가는 프로그램을 말함
------┬------------------------┿----------------------┬-----------
      Alzip	      bamboo paper            Ms office 



		HDD에 저장된 목록 출력 
		// 운영체제가 존재해야 하는 이유는
		아래 두가지를 보여주기 위해서이다.
------┬------------------------┿----------------------┬-----------
    Comandline	               		GraphicalUserInterface


		       컴퓨터 구조
--------------------------------┿-----------------------------------

		            CPU
			 ↓
			RAM
			 ↓
			HDD


		         
--------------------------------┿-----------------------------------

		            개발자
			 ↓
			명령어 > Instructions
			 ↓
		    // CPU에 맞춰서 작성
			Intel
			 ∥ ↑(인텔호환)
			AMD
		---------------------------
	// 얘내들은 CPU에 맞춰서 작성을 안했기때문에 안됌.
			[ARM]
		         [Qualcomm]
		          [액시노스]

		         운영체제
--------------------------------┿-----------------------------------
		      Intel windows
		      ARM windows
		
		// Android 는 linux 커널이다.
		      Intel linux
		      ARM linux

		// IOS 는 macOS 하위 계열이다
		      Intel macOS  > unix 계열 
		    (m1) ARM macOS > unix 계열


   		        javac 와 java
--------------------------------┿-----------------------------------
		          개발자(작성)
			 ↓
		        Hello.java [$ javac Hello.java] (source /  소스 )
			 ↓ [java.exe] 컴파일 / (바이트코드로 변환)
		        Hello.class (bytecode / 바이트코드 ) 
			 ↓


 		       컴파일 방식과 인터프리터 방식
--------------------------------┿-----------------------------------

		        ★컴파일 방식

		       [C소스파일] ~.C
			 ↓ 컴파일 <= 컴파일러
		            [*.obj]   ┐
		          +  *.obj   ┼─ linking < 링커
		          +  *.obj   ┘
			 ↓linking < 링커
			 [*.exe]
			 ↓
			[windowsOS] (운영체제)
			 ↓
			 [Intel] (CPU) 

	* 컴파일 방식은 OS와 CPU에 맞춰서 따로 따로 수행해야 한다.
			 ↓
		OS와 CPU에 종속적이다.


		     ★인터프리터 방식

		       [js소스파일] ~.js

			 ↓ 실행

   [윈도우용 node 인터프리터]	[리눅스용 node 인터프리터]
	↓				  ↓
    [windowsOS]			        [windowsOS] 
	↓				  ↓
          [Intel]                                           [Intel]




		     ★Java 의 컴파일 과 실행
		// 컴파일 방식 + 인터프리터 방식 = 하이브리드 방식


		          [*.java] ~.java
			 ↓ 컴파일 <= 컴파일러 -------------------------------↓

							(↕컴파일 방식) 

	      [*.class] 진짜 CPU명령 x > 가상의 기계어 > OS와 CPU에 비종속 ↕---------------------┐
										    │
			 ↓(bytecode로 실행할때 os별 jvm이 필요. < bytecode 인터프리터      │
									                │
windowsOS JVM  		LinuxJVM 		macOS JVM			    ↕ (인터프리터 방식)
      ↓		  	    ↓			      ↓				    │
[windows] + CPU              [Linux] + CPU                       [macOS] + CPU			    │
										    │
								↑----------------------┙






